CURSO JAVASCRIPT ES6

COMANDOS e configurações
Aula 07 - rest/spread
terminal
- yarn add @babel/plugin-proposal-object-rest-spread
babelrc
- "plugins": ["@babel/plugin-proposal-object-rest-spread"]

terminal
yarn add @babel/cli

yarn cache clean (caso de problema na instalação)

WebPack (serviço que disponibiliza forma de trabalhar com diversos arquivos js e outros) e todos estes arquivos ainda serão convertidos em um único bundle.js com todas as informações
terminal
- yarn add webpack webpack-cli -D
package.json
-  "dependencies": {
alterar para 
 "devDependencies": {
Pois, estas dependencias são necessárias apenas em desenvolvimento. Em produção envia apenas o bundle.js.

NOVO ARQUIVO webpack.config.js
module.exports = {
    entry: './main.js', //Arquivo principal onde escreve codigo ES6...
    output: { // Para qual arquivo deve enviar código convertido para compatibilidade antes ES6
        path: __dirname, //diretorio raiz
        filename: 'bundle.js', //arquivo bundle como já estava
    },
    module: {
        rules: [ //Diz como o webpack deve comportar ao importar novos arquivos js
            { // baseado na extensão do arquivo, qual loader vai utilizar
                test: /\.js$/, // Arquivos terminados com js
                exclude: /node_modules/, //Pro babel não executar arquivos desta pasta
                use: {
                    loader: 'babel-loader', // com este loader não será necessário mais o babel em background
                }
            }
        ]
    }
};

terminal
Instalar babel-loader como dependencia
- yarn add babel-loader -D


webpack server
- criar pastas src e public
- mover main.js para src ( todos arquivos que webpack precisa monitorar)
- mover index.html para public (arquivos que webpack nao precisa monitorar)
- no webpack.config realizar estas alterações

instalar dev server
- yarn add webpack-dev-server -D

- webpack config inserir após output
devServer: {
    contentBase: __dirname + '/public'
},

- package.json alterar o scripts para trabalhar com o server
"scripts": {
    "dev": "webpack-dev-server --mode=development"
}

-- yarn dev (para testar)

obs.: o webpack server não cria o bundle.js, ele aparece embutido para trabalhar offline.

Para produção, criar script build
- package.json, incluir
"scripts": {
    ...,
    "build": "webpack --mode=production"
}

- yarn build
Aí sim vai gerar o bundle.js